name: ci

on: [push, pull_request]

jobs:
  linux-build:
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v4

      - name: Install dependencies (Linux)
        run: |
          sudo apt-get update
          sudo apt-get install -y libavformat-dev libavcodec-dev libavutil-dev \
            libswscale-dev libswresample-dev libsdl2-dev

      - name: Build app (Linux)
        run: make

  macos-build:
    runs-on: macos-latest

    steps:
      - uses: actions/checkout@v3

      - name: Install Homebrew (macOS)
        run: |
          /bin/bash -c "$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/HEAD/install.sh)"
          echo 'eval "$(/opt/homebrew/bin/brew shellenv)"' >> ~/.zshrc
          echo 'eval "$(/opt/homebrew/bin/brew shellenv)"' >> ~/.bashrc
          eval "$(/opt/homebrew/bin/brew shellenv)"

      - name: Install dependencies (macOS)
        run: |
          brew update
          brew install sdl2 ffmpeg
      
      - name: Build app (macOS)
        run: make

  windows-build:
    runs-on: windows-latest
    env:
      MSYS2_ROOT: C:\tools\msys64
      CACHE_VERSION: v2

    steps:
      - uses: actions/checkout@v4

      - name: Cache MSYS2 pacman package
        uses: actions/cache@v4
        id: msys2-pacman-cache
        with:
          path: C:\msys64\var\cache\pacman\pkg
        key: msys2-pacman-${{ runner.os }}-${{ env.CACHE_VERSION }}
        restore-keys: |
          msys2-pacman-${{ runner.os }}-

      - name: Show pacman cache status
        if: always() # Run even if previous steps fail
        shell: bash
        run: |
          echo "Cache hit: ${{ steps.msys2-pacman-cache.outputs.cache-hit }}"
          echo "Cache key: ${{ steps.msys2-pacman-cache.outputs.cache-primary-key }}" # Note: output name changed in v4

          # Always run setup-msys2 to configure the environment (PATH etc.)
          # It will use the cached packages if available, making installation fast
      - name: Setup MSYS2 environment
        uses: msys2/setup-msys2@v2
        with:
          msystem: MINGW64 # Specify the desired environment (default is MINGW64)
          update: true    # Update the MSYS2 base packages first
          install: ${{ env.PACKAGE_LIST }} # Install desired packages ('--needed' is implied)
          # The action automatically adds the correct bin dirs (e.g., C:\msys64\mingw64\bin) to PATH

          # Use the msys2 shell provided by setup-msys2 for subsequent steps
          # This ensures PATH and other environment variables are set correctly
      - name: Build project (Windows)
        shell: msys2 {0} # Use the msys2 shell provided by the setup action
        run: |
          echo "--- Environment Info ---"
          gcc --version
          pkg-config --version
          mingw32-make --version # Check the actual make command version
          echo "PATH=$PATH"
          pwd
          ls -l

          echo "--- Starting Build ---"
          mingw32-make all

          echo "--- Build Output ---"
          ls -l build/bin/ || echo "Build output directory 'build/bin/' not found or empty."

      - name: Upload Build Artifact
        if: success() # Only run if build succeeded
        uses: actions/upload-artifact@v4
        with:
          name: windows-build-output
          path: |
            build/bin/* # Adjust this path/pattern match your build output
